// <auto-generated />
using System;
using IMINBackend.Services.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IMINBackend.Services.Migrations
{
    [DbContext(typeof(IminDbContext))]
    [Migration("20250323192428_Migration_Volunteer_Pole")]
    partial class Migration_Volunteer_Pole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IMINBackend.Services.Model.Account.AccessAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FirstConnection")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastConnection")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccessAccounts");
                });

            modelBuilder.Entity("IMINBackend.Services.Model.Account.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IMINBackend.Services.Model.Association.Pole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Poles");
                });

            modelBuilder.Entity("IMINBackend.Services.Model.Association.PoleMembership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("PoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("VolunteerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VolunteerId1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PoleId");

                    b.HasIndex("VolunteerId");

                    b.HasIndex("VolunteerId1");

                    b.ToTable("PoleMemberships");
                });

            modelBuilder.Entity("IMINBackend.Services.Model.Association.Volunteer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastDistribution")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastInscriptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Volunteers");
                });

            modelBuilder.Entity("IMINBackend.Services.Model.Account.AccessAccount", b =>
                {
                    b.HasOne("IMINBackend.Services.Model.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMINBackend.Services.Model.Association.PoleMembership", b =>
                {
                    b.HasOne("IMINBackend.Services.Model.Association.Pole", "Pole")
                        .WithMany()
                        .HasForeignKey("PoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMINBackend.Services.Model.Association.Volunteer", "Volunteer")
                        .WithMany()
                        .HasForeignKey("VolunteerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMINBackend.Services.Model.Association.Volunteer", null)
                        .WithMany("PoleMemberships")
                        .HasForeignKey("VolunteerId1");

                    b.Navigation("Pole");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("IMINBackend.Services.Model.Association.Volunteer", b =>
                {
                    b.HasOne("IMINBackend.Services.Model.Account.User", "User")
                        .WithOne("Volunteer")
                        .HasForeignKey("IMINBackend.Services.Model.Association.Volunteer", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IMINBackend.Services.Model.Account.User", b =>
                {
                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("IMINBackend.Services.Model.Association.Volunteer", b =>
                {
                    b.Navigation("PoleMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
